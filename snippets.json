{
  "hoverDropdown": {
    "html": "<div id=\"navMenu\">\n  <div class=\"entry\">one\n    <div class=\"dropdown\">\n      <div>a</div>\n      <div>b</div>\n      <div>c</div>\n      <div>d</div>\n    </div>\n  </div>\n  <div class=\"entry\">two\n  <div class=\"dropdown\">\n      <div>a</div>\n      <div>b</div>\n      <div>c</div>\n      <div>d</div>\n    </div>\n  </div>\n  <div class=\"entry\">three\n    <div class=\"dropdown\">\n      <div>a</div>\n      <div>b</div>\n      <div>c</div>\n      <div>d</div>\n    </div>\n  </div>\n</div>",
    "css": "#navMenu {\n  display: flex;\n  justify-content: space-around;\n  background: pink\n}\n\n.entry {\n  cursor: pointer;\n}\n\n.entry:hover {\n  background: deeppink;\n}\n\n.entry:hover .dropdown {\n  display: block;\n  background: deeppink;\n}\n\n.dropdown {\n  position: absolute;\n  display: none;\n}\n\n.dropdown > div {\n  padding: 4px 20px;\n}\n\n.dropdown > div:hover {\n  background: yellow;  \n}\n",
    "js": ""
  },
  "responsiveGrid": {
    "html": "<div id=\"grid\">\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n</div>",
    "css": "#grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  gap: 0.5rem;\n  max-width: 500px;\n  margin: auto;\n}\n\n#grid > * {\n  background-color: green;\n  aspect-ratio: 1;\n}",
    "js": ""
  },
  "downloadJSON": {
    "html": "<button id=\"downBtn\">download</button>",
    "css": "button {\n  background-color: #4CAF50;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\nbutton:hover {\n  background-color: #388a3b;\n}",
    "js": "function downloadJSON() {\n  const el = document.createElement(\"a\");\n  el.href =\n    \"data:text/json;charset=utf-8,\" +\n    encodeURIComponent(JSON.stringify({message: \"this is a test\"}));\n  el.download = \"my-json.json\";\n  document.body.appendChild(el);\n  el.click();\n  document.body.removeChild(el);\n}\n\ndocument.getElementById(\"downBtn\").addEventListener(\"click\", downloadJSON)"
  },
  "panZoomBackground": {
    "html": "<div class=\"dotted background\"></div>\n<div class=\"lined background\"></div>\n<div class=\"checkerboard background\"></div>",
    "css": "html, body {\n  margin: 0;\n}\n\nbody {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.background {\n  --grid-size: 40px;\n  --dot-size: 1px;\n  --grid-color: white;\n  --background-color: darkslateblue;\n  \n  --offset-x: 0px;\n  --offset-y: 0px;\n  --scale: 1;\n\n  background-size: calc(var(--grid-size) * var(--scale, 1)) calc(var(--grid-size) * var(--scale, 1));\n  background-position: var(--offset-x, 0) var(--offset-y, 0);\n  flex: 1;\n}\n\n.dotted {\n  background-image: radial-gradient(circle, var(--grid-color), var(--background-color) 1px);\n}\n\n.lined {\n  background-image:\n  linear-gradient(to right, var(--grid-color), transparent 1px),\n  linear-gradient(to bottom, var(--grid-color), var(--background-color) 1px);\n}\n\n.checkerboard {\n  background-image: repeating-conic-gradient(var(--background-color) 0% 25%, var(--grid-color) 0% 50%)\n}",
    "js": "function panZoom(el) {\n  el.addEventListener(\"pointerdown\", startPan);\n  el.addEventListener(\"pointermove\", pan)\n  el.addEventListener(\"pointerup\", endPan)\n  el.addEventListener(\"wheel\", zoom)\n  \n  let mousedown = false;\n  let scale = 1;\n  let pointX = 0;\n  let pointY = 0;\n  let start = { x: 0, y: 0 };\n  \n  function update() {\n    el.style.setProperty(\"--scale\", scale);\n    el.style.setProperty(\"--offset-x\", `${pointX}px`);\n    el.style.setProperty(\"--offset-y\", `${pointY}px`);\n  }\n  \n  function startPan(e) {\n    mousedown = true;\n    start = { x: e.offsetX - pointX, y: e.offsetY - pointY };\n  };\n  \n  function zoom(e) {\n    let xs = (e.offsetX - pointX) / scale;\n    let ys = (e.offsetY - pointY) / scale;\n  \n    if (Math.sign(e.deltaY) < 0) scale *= 1.03;\n    else scale /= 1.03;\n  \n    pointX = e.offsetX - xs * scale;\n    pointY = e.offsetY - ys * scale;\n  \n    update();\n  }\n  \n  function pan(e) {\n    if (!mousedown) return;\n  \n    pointX = e.offsetX - start.x;\n    pointY = e.offsetY - start.y;\n  \n    update();\n  };\n  \n  function endPan() {\n    mousedown = false;\n  }\n}\n\ndocument.querySelectorAll(\".background\").forEach((el) => panZoom(el))"
  },
  "styledScrollbar": {
    "html": "<div class=\"content\"></div>",
    "css": ".content {\n  background: pink;\n  height: 200vh;\n}\n\n/* Works on Firefox */\n* {\n  scrollbar-width: thin;\n  scrollbar-color: blue orange;\n}\n\n/* Works on Chrome, Edge, and Safari */\n*::-webkit-scrollbar {\n  width: 12px;\n}\n\n*::-webkit-scrollbar-track {\n  background: orange;\n}\n\n*::-webkit-scrollbar-thumb {\n  background-color: blue;\n  border-radius: 20px;\n  border: 3px solid orange;\n}\n",
    "js": ""
  },
  "gridWithBorder": {
    "html": "<div id=\"grid\">\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n</div>",
    "css": "#grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  padding: 1px;\n  gap: 1px;\n  max-width: 500px;\n  margin: auto;\n  background: black;\n}\n\n#grid > * {\n  background: white;\n  aspect-ratio: 1;\n}",
    "js": ""
  },
  "glitchText": {
    "html": "<div class=\"glitch-wrapper\">\n   <div class=\"glitch\" data-glitch=\"hannah\">hannah</div>\n</div>",
    "css": "html, body {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  height: 100vh;\n  padding:0;\n  display: flex;\n}\n\n.glitch-wrapper {\n  font-family: monospace;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  background-color: #222;\n}\n\n.glitch {\n  position: relative;\n  font-size: 80px;\n  font-weight: 700;\n  line-height: 1.2;\n  color: #fff;\n  letter-spacing: 5px;\n  z-index: 1;\n}\n\n.glitch:before,\n.glitch:after {\n   display: block;\n   content: attr(data-glitch);\n   position: absolute;\n   top: 0;\n   left: 0;\n   opacity: 0.8;\n}\n\n.glitch:before {\n   animation: glitch-color 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both infinite;\n   color: #00ffff;\n   z-index: -1;\n}\n\n.glitch:after {\n   animation: glitch-color 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) reverse both infinite;\n   color: #ff00ff;\n   z-index: -2;\n}\n\n@keyframes glitch-color {\n   0% {\n      transform: translate(0);\n   }\n\n   20% {\n      transform: translate(-3px, 3px);\n   }\n\n   40% {\n      transform: translate(-3px, -3px);\n   }\n\n   60% {\n      transform: translate(3px, 3px);\n   }\n\n   80% {\n      transform: translate(3px, -3px);\n   }\n\n   to {\n      transform: translate(0);\n   }\n}",
    "js": ""
  }
}